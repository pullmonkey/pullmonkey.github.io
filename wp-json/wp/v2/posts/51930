{"id":51930,"date":"2009-02-23T04:13:00","date_gmt":"2009-02-23T04:13:00","guid":{"rendered":"\/2009\/03\/01\/ece231-spring-2009-programming-assignment-2"},"modified":"2009-08-30T00:17:13","modified_gmt":"2009-08-30T00:17:13","slug":"ece231-spring-2009-programming-assignment-2","status":"publish","type":"post","link":"http:\/\/pullmonkey.com\/2009\/02\/23\/ece231-spring-2009-programming-assignment-2\/","title":{"rendered":"ECE231 &#8211; Spring 2009 &#8211; Programming Assignment 2"},"content":{"rendered":"<p>This is a step-by-step tutorial for this assignment and an explanation of the basics of how it works for those that are having a difficult time understanding or just are stuck somewhere. To <a href=\"http:\/\/www.unm.edu\/~speralta\/progs\/ece231assn2.htm\">view the assignment click here<\/a>.<\/p>\n<p>So for this assignment we are going to be doing a lot of math calculations so we are going to need the include the both the <b>iostream<\/b> and the <b>cmath<\/b> libraries. We will also need the value of <b>pi<\/b>.<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"pp\">#include<\/span> <span class=\"ic\">&lt;iostream&gt;<\/span><tt>\n<\/tt><span class=\"pp\">#include<\/span> <span class=\"ic\">&lt;cmath&gt;<\/span><tt>\n<\/tt><tt>\n<\/tt><span class=\"pp\">#define<\/span> PI <span class=\"fl\">3<\/span><span class=\"fl\">.14159<\/span><tt>\n<\/tt>or<tt>\n<\/tt><span class=\"r\">const<\/span> <span class=\"pt\">double<\/span> PI = <span class=\"fl\">3<\/span><span class=\"fl\">.14159<\/span>;<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<h2>Defining the Coordinate Class<\/h2>\n<p>For the <b>coordinate<\/b> class we need 2 private variables <b><i>x<\/i><\/b> and <b><i>y<\/i><\/b>, 3 <b>constructors<\/b>, and 11 <b>member functions<\/b>.<\/p>\n<p>The way you do the constructors and member functions can be done 2 different ways. You can either do them inside the class, or you can define them inside the class, like you do prototypes, and then have the actual functions at the bottom of your code. I like to define them and then put the functions at the bottom, making the code a little bit easier to read so that is the way that I'll show you, but if you want to do it the other way then just do it how you normally would with a regular function.<\/p>\n<p>So here is what your class should look like (keep in mind that this all goes at the top <b>before the main function<\/b>):<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt>11<tt>\n<\/tt>12<tt>\n<\/tt>13<tt>\n<\/tt>14<tt>\n<\/tt><strong>15<\/strong><tt>\n<\/tt>16<tt>\n<\/tt>17<tt>\n<\/tt>18<tt>\n<\/tt>19<tt>\n<\/tt><strong>20<\/strong><tt>\n<\/tt>21<tt>\n<\/tt>22<tt>\n<\/tt>23<tt>\n<\/tt>24<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt>class coordinate<tt>\n<\/tt>{<tt>\n<\/tt>  <span class=\"la\">private:<\/span><tt>\n<\/tt>    <span class=\"pt\">double<\/span> x;  <span class=\"c\">\/\/ x value of the coordinate point<\/span><tt>\n<\/tt>    <span class=\"pt\">double<\/span> y;  <span class=\"c\">\/\/ y value of the coordinate point<\/span><tt>\n<\/tt>  <span class=\"la\">public:<\/span><tt>\n<\/tt>    coordinate(); <span class=\"c\">\/\/ 1st constructor requiring that no arguments are passed<\/span><tt>\n<\/tt>    coordinate(<span class=\"pt\">double<\/span> ); <span class=\"c\">\/\/ 2nd constructor requiring that only 1 argument is passed<\/span><tt>\n<\/tt>    coordinate(<span class=\"pt\">double<\/span> , <span class=\"pt\">double<\/span> ); <span class=\"c\">\/\/ 3rd constructor requiring that 2 arguments are passed<\/span><tt>\n<\/tt><tt>\n<\/tt>    <span class=\"pt\">void<\/span> set(<span class=\"pt\">double<\/span> , <span class=\"pt\">double<\/span> ); <span class=\"c\">\/\/ sets both values and requires 2 arguments to be passed<\/span><tt>\n<\/tt>    <span class=\"pt\">void<\/span> setx(<span class=\"pt\">double<\/span> ); <span class=\"c\">\/\/ sets x value and requires 1 argument to be passed<\/span><tt>\n<\/tt>    <span class=\"pt\">void<\/span> sety(<span class=\"pt\">double<\/span> ); <span class=\"c\">\/\/ sets y value and requires 1 argument to be passed<\/span><tt>\n<\/tt>    <span class=\"pt\">void<\/span> read(); <span class=\"c\">\/\/ allows user to input both x and y values <\/span><tt>\n<\/tt>    <span class=\"pt\">void<\/span> print(); <span class=\"c\">\/\/ prints out the coordinate point in &quot;(x, y)&quot; form<\/span><tt>\n<\/tt>    <span class=\"pt\">double<\/span> distancezero(); <span class=\"c\">\/\/ calculates distance of point from zero and returns the value<\/span><tt>\n<\/tt>    <span class=\"pt\">double<\/span> distancetwo(coordinate ); <span class=\"c\">\/\/ calculates distance between 2 points (current instance and coordinate value passed) and returns the value<\/span><tt>\n<\/tt>    <span class=\"pt\">double<\/span> ranglezero(); <span class=\"c\">\/\/ calculates the angle of the coordinate in radians and returns the value<\/span><tt>\n<\/tt>    <span class=\"pt\">double<\/span> danglezero(); <span class=\"c\">\/\/ calculates the angle of the coordinate in degrees and returns the value<\/span><tt>\n<\/tt>    <span class=\"pt\">int<\/span> quadrant(); <span class=\"c\">\/\/ find what quadrant the coordinate is in and returns the value<\/span><tt>\n<\/tt>    <span class=\"pt\">void<\/span> midpoint(coordinate ); <span class=\"c\">\/\/ calculates the midpoint between 2 points (current instance and coordinate value passed) and prints the value as a coordinate<\/span><tt>\n<\/tt>};<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<h2>Writing the Actual Functions for the Coordinate Class<\/h2>\n<p>Since we are not actually writing the functions in the same place we are doing the class we will write them at the bottom <b>after the main function<\/b>. However, to do this we will need a little more than what we would with regular functions. For <b>member functions<\/b> we have to define what class the function is actually a member of. To do this we have to do <b>coordinate::[function]()<\/b>.<\/p>\n<p>For example, here are the 3 constructors for the <b><i>coordinate<\/i><\/b> class:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt>11<tt>\n<\/tt>12<tt>\n<\/tt>13<tt>\n<\/tt>14<tt>\n<\/tt><strong>15<\/strong><tt>\n<\/tt>16<tt>\n<\/tt>17<tt>\n<\/tt>18<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"c\">\/\/ takes no arguments and sets x and y to 0<\/span><tt>\n<\/tt>coordinate::coordinate()<tt>\n<\/tt>{<tt>\n<\/tt>  x = y = <span class=\"i\">0<\/span>;<tt>\n<\/tt>} <tt>\n<\/tt><span class=\"c\">\/\/ takes 1 argument and sets x and y to that value<\/span><tt>\n<\/tt>coordinate::coordinate(<span class=\"pt\">double<\/span> a)<tt>\n<\/tt>{<tt>\n<\/tt>  x = y = a;<tt>\n<\/tt>} <tt>\n<\/tt><span class=\"c\">\/\/ takes 2 arguments and sets the corresponding x and y to those values<\/span><tt>\n<\/tt>coordinate::coordinate(<span class=\"pt\">double<\/span> a, <span class=\"pt\">double<\/span> b)<tt>\n<\/tt>{<tt>\n<\/tt>  x = a;<tt>\n<\/tt>  y = b;<tt>\n<\/tt>}<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>Next, we have the <b>member functions<\/b>. The first 3 are the set functions. These allow the user to set the values of either the <b<i>x<\/i<\/b> or the <b><i>y<\/i><\/b> or both together.<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt>11<tt>\n<\/tt>12<tt>\n<\/tt>13<tt>\n<\/tt>14<tt>\n<\/tt><strong>15<\/strong><tt>\n<\/tt>16<tt>\n<\/tt>17<tt>\n<\/tt>18<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"c\">\/\/ take 2 arguments and sets the corresponding x and y to those values<\/span><tt>\n<\/tt><span class=\"pt\">void<\/span> coordinate::set(<span class=\"pt\">double<\/span> a, <span class=\"pt\">double<\/span> b)<tt>\n<\/tt>{<tt>\n<\/tt>  x = a;<tt>\n<\/tt>  y = b;<tt>\n<\/tt>}<tt>\n<\/tt><span class=\"c\">\/\/ takes 1 argument and sets the x to that value<\/span><tt>\n<\/tt><span class=\"pt\">void<\/span> coordinate::setx(<span class=\"pt\">double<\/span> a)<tt>\n<\/tt>{<tt>\n<\/tt>  x = a;<tt>\n<\/tt>}<tt>\n<\/tt><span class=\"c\">\/\/ takes 1 argument and sets the y to that value<\/span><tt>\n<\/tt><span class=\"pt\">void<\/span> coordinate::sety(<span class=\"pt\">double<\/span> b)<tt>\n<\/tt>{<tt>\n<\/tt>  y = b;<tt>\n<\/tt>}<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>Next, is the <b>read<\/b> and <b>print<\/b> functions. All we want the read to do is to do a <b>cin<\/b> of the 2 values (<b><i>x<\/i><\/b> and <b><i>y<\/i><\/b>). The <b>print<\/b> is just the opposite. All it does is do a <b>cout<\/b> of the <b><i>x<\/i><\/b> and <b><i>y<\/i><\/b> values in the <b>(<i>x<\/i>, <i>y<\/i>)<\/b> format.<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt>11<tt>\n<\/tt>12<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"c\">\/\/ takes no arguments and reads in the x and y values from the screen<\/span><tt>\n<\/tt><span class=\"pt\">void<\/span> coordinate::read()<tt>\n<\/tt>{<tt>\n<\/tt>  cin &gt;&gt; x &gt;&gt; y;<tt>\n<\/tt>}<tt>\n<\/tt><span class=\"c\">\/\/ takes no arguments and prints the x and y values in (x, y) format<\/span><tt>\n<\/tt><span class=\"pt\">void<\/span> coordinate::print()<tt>\n<\/tt>{<tt>\n<\/tt>  cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">(<\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; x &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">, <\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; y &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">)<\/span><span class=\"dl\">&quot;<\/span><\/span>;<tt>\n<\/tt>}<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>Next, we have the distance functions. <b>distanczero<\/b> calculates the distance of the <b>current instance<\/b> coordinate from 0. <b>distancetwo<\/b> calculates the distance between 2 points (the <b>current instance<\/b> and the coordinate passed in).<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt>11<tt>\n<\/tt>12<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"c\">\/\/ takes no arguments and returns the distance of the current instance from zero<\/span><tt>\n<\/tt><span class=\"pt\">double<\/span> coordinate::distancezero()<tt>\n<\/tt>{<tt>\n<\/tt>  <span class=\"r\">return<\/span> sqrt(x * x + y * y);<tt>\n<\/tt>}<tt>\n<\/tt><span class=\"c\">\/\/ take 1 argument and calculates the distance between them<\/span><tt>\n<\/tt><span class=\"pt\">double<\/span> coordinate::distancetwo(coordinate pt)<tt>\n<\/tt>{<tt>\n<\/tt>  <span class=\"r\">return<\/span> sqrt(pow(x - pt.x, <span class=\"fl\">2<\/span><span class=\"fl\">.0<\/span>) + pow(y - pt.y, <span class=\"fl\">2<\/span><span class=\"fl\">.0<\/span>));<tt>\n<\/tt>}<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>Next, we have the angle functions. <b>ranglezero<\/b> uses the function in the math library <b>atan()<\/b>(arc tangent) to find the angle in radians from the positive x axis. <b>danglezero<\/b> does the same thing but converts the value from radians to degrees. To convert from radians to degrees you multiply the value by 180 \/ pi<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt>11<tt>\n<\/tt>12<tt>\n<\/tt>13<tt>\n<\/tt>14<tt>\n<\/tt><strong>15<\/strong><tt>\n<\/tt>16<tt>\n<\/tt>17<tt>\n<\/tt>18<tt>\n<\/tt>19<tt>\n<\/tt><strong>20<\/strong><tt>\n<\/tt>21<tt>\n<\/tt>22<tt>\n<\/tt>23<tt>\n<\/tt>24<tt>\n<\/tt><strong>25<\/strong><tt>\n<\/tt>26<tt>\n<\/tt>27<tt>\n<\/tt>28<tt>\n<\/tt>29<tt>\n<\/tt><strong>30<\/strong><tt>\n<\/tt>31<tt>\n<\/tt>32<tt>\n<\/tt>33<tt>\n<\/tt>34<tt>\n<\/tt><strong>35<\/strong><tt>\n<\/tt>36<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"c\">\/\/ takes no arguments and returns the angle of the coordinate from the positive x axis in radians<\/span><tt>\n<\/tt><span class=\"pt\">double<\/span> coordinate::ranglezero()<tt>\n<\/tt>{<tt>\n<\/tt>  <span class=\"pt\">double<\/span> angle; <span class=\"c\">\/\/ angle of coordinate from positive x axis<\/span><tt>\n<\/tt>  <span class=\"r\">if<\/span>(x == <span class=\"i\">0<\/span>) <span class=\"c\">\/\/ if x == 0 then you will get a domain error so compute angle manually<\/span><tt>\n<\/tt>  {<tt>\n<\/tt>    <span class=\"r\">if<\/span>(y &gt; <span class=\"i\">0<\/span>) <span class=\"r\">return<\/span> PI \/ <span class=\"i\">2<\/span>;<tt>\n<\/tt>    <span class=\"r\">if<\/span>(y &lt; <span class=\"i\">0<\/span>) <span class=\"r\">return<\/span> -PI \/ <span class=\"i\">2<\/span>;<tt>\n<\/tt>    <span class=\"r\">if<\/span>(y == <span class=\"i\">0<\/span>) <span class=\"r\">return<\/span> <span class=\"i\">0<\/span>;<tt>\n<\/tt>  }<tt>\n<\/tt>  angle = atan(y \/ x);<tt>\n<\/tt>  <span class=\"r\">if<\/span>(x &lt; <span class=\"i\">0<\/span> and y &gt;= <span class=\"i\">0<\/span>)<tt>\n<\/tt>    <span class=\"r\">return<\/span> PI - abs(angle);<tt>\n<\/tt>  <span class=\"r\">if<\/span>(x &lt; <span class=\"i\">0<\/span> and y &lt; <span class=\"i\">0<\/span>)<tt>\n<\/tt>    <span class=\"r\">return<\/span> -(PI - abs(angle));<tt>\n<\/tt>  <span class=\"r\">return<\/span> angle;<tt>\n<\/tt>}<tt>\n<\/tt><span class=\"c\">\/\/ takes no arguments and returns the angle of the coordinate from the positive x axis in degrees<\/span><tt>\n<\/tt><span class=\"pt\">double<\/span> coordinate::danglezero()<tt>\n<\/tt>{<tt>\n<\/tt>  <span class=\"pt\">double<\/span> angle; <span class=\"c\">\/\/ angle of coordinate from positive x axis<\/span><tt>\n<\/tt>  <span class=\"r\">if<\/span>(x == <span class=\"i\">0<\/span>) <span class=\"c\">\/\/ if x == 0 then you will get a domain error so compute angle manually<\/span><tt>\n<\/tt>  {<tt>\n<\/tt>    <span class=\"r\">if<\/span>(y &gt; <span class=\"i\">0<\/span>) <span class=\"r\">return<\/span> <span class=\"i\">90<\/span>;<tt>\n<\/tt>    <span class=\"r\">if<\/span>(y &lt; <span class=\"i\">0<\/span>) <span class=\"r\">return<\/span> -<span class=\"i\">90<\/span>;<tt>\n<\/tt>    <span class=\"r\">if<\/span>(y == <span class=\"i\">0<\/span>) <span class=\"r\">return<\/span> <span class=\"i\">0<\/span>;<tt>\n<\/tt>  }<tt>\n<\/tt>  angle = atan(y \/ x) * <span class=\"i\">180<\/span> \/ PI;<tt>\n<\/tt>  <span class=\"r\">if<\/span>(x &lt; <span class=\"i\">0<\/span> and y &gt;= <span class=\"i\">0<\/span>)<tt>\n<\/tt>    <span class=\"r\">return<\/span> <span class=\"i\">180<\/span> - abs(angle);<tt>\n<\/tt>  <span class=\"r\">if<\/span>(x &lt; <span class=\"i\">0<\/span> and y &lt; <span class=\"i\">0<\/span>)<tt>\n<\/tt>    <span class=\"r\">return<\/span> -(<span class=\"i\">180<\/span> - abs(angle));<tt>\n<\/tt>  <span class=\"r\">return<\/span> angle;<tt>\n<\/tt>}<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>Next, we have the <b>quadrant<\/b> function. This looks at whether the <b><i>x<\/i><\/b> and <b><i>y<\/i><\/b> values are positive or negative to determine which quadrant the coordinate is in. It will return the number of the quadrant as an integer 1-4 and 0 if the coordinate is (0, 0)<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt>11<tt>\n<\/tt>12<tt>\n<\/tt>13<tt>\n<\/tt>14<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"pt\">int<\/span> coordinate::quadrant()<tt>\n<\/tt>{<tt>\n<\/tt>  <span class=\"r\">if<\/span>(x &gt; <span class=\"i\">0<\/span> &amp;&amp; y &gt;= <span class=\"i\">0<\/span>)<tt>\n<\/tt>    <span class=\"r\">return<\/span> <span class=\"i\">1<\/span>; <span class=\"c\">\/\/ return quadrant 1<\/span><tt>\n<\/tt>  <span class=\"r\">if<\/span>(x &lt;= <span class=\"i\">0<\/span> &amp;&amp; y &gt; <span class=\"i\">0<\/span>)<tt>\n<\/tt>    <span class=\"r\">return<\/span> <span class=\"i\">2<\/span>; <span class=\"c\">\/\/ return quadrant 2<\/span><tt>\n<\/tt>  <span class=\"r\">if<\/span>(x &lt; <span class=\"i\">0<\/span> &amp;&amp; y &lt;= <span class=\"i\">0<\/span>)<tt>\n<\/tt>    <span class=\"r\">return<\/span> <span class=\"i\">3<\/span>; <span class=\"c\">\/\/ return quadrant 3<\/span><tt>\n<\/tt>  <span class=\"r\">if<\/span>(x &gt;= <span class=\"i\">0<\/span> &amp;&amp; y &lt; <span class=\"i\">0<\/span>)<tt>\n<\/tt>    <span class=\"r\">return<\/span> <span class=\"i\">4<\/span>; <span class=\"c\">\/\/ return quadrant 4<\/span><tt>\n<\/tt>  <span class=\"r\">return<\/span> <span class=\"i\">0<\/span>;   <span class=\"c\">\/\/ return 0 if point is (0, 0)<\/span><tt>\n<\/tt>}<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>Last, we have the <b>midpoint<\/b> function. you will need to pass this function a coordinate instance and it will calculate the midpoint between the <b>current instance<\/b> and the <b>passed instance<\/b> and print the coordinate instance.<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"pt\">void<\/span> coordinate::midpoint(coordinate pt)<tt>\n<\/tt>{<tt>\n<\/tt>  coordinate np; <span class=\"c\">\/\/ new coordinate point<\/span><tt>\n<\/tt>  np.x = (x + pt.x) \/ <span class=\"fl\">2<\/span><span class=\"fl\">.0<\/span>;<tt>\n<\/tt>  np.y = (y + pt.y) \/ <span class=\"fl\">2<\/span><span class=\"fl\">.0<\/span>;<tt>\n<\/tt>  np.print();<tt>\n<\/tt>}<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>Now all you have to do is test each constructor and member function to make sure that everything is working properly.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>This is a step-by-step tutorial for this assignment and an explanation of the basics of how it works for those that are having a difficult time understanding or just are stuck somewhere. To view the assignment click here. So for this assignment we are going to be doing a lot of math calculations so we [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,6,3,14,30],"tags":[33,34,35],"_links":{"self":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/51930"}],"collection":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/comments?post=51930"}],"version-history":[{"count":2,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/51930\/revisions"}],"predecessor-version":[{"id":57502,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/51930\/revisions\/57502"}],"wp:attachment":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/media?parent=51930"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/categories?post=51930"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/tags?post=51930"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}