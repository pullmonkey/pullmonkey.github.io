{"id":111,"date":"2008-01-06T02:15:00","date_gmt":"2008-01-06T02:15:00","guid":{"rendered":"\/2008\/08\/06\/convert-a-ruby-hash-into-a-class-object"},"modified":"2009-08-30T04:45:53","modified_gmt":"2009-08-30T04:45:53","slug":"convert-a-ruby-hash-into-a-class-object","status":"publish","type":"post","link":"http:\/\/pullmonkey.com\/2008\/01\/06\/convert-a-ruby-hash-into-a-class-object\/","title":{"rendered":"Convert a Ruby hash into a class object"},"content":{"rendered":"<p>I first saw the need to convert a hash object to a class when answering <a href=\"http:\/\/railsforum.com\/viewtopic.php?pid=49768\">this post<\/a>.<br \/>\nIn the post, the user wanted to load a YAML object into his hash and then present the data from the hash in a form.  Needless to say it was not very DRY the way it had to be implemented.   So I started looking into it, I found <a href=\"http:\/\/blade.nagaokaut.ac.jp\/cgi-bin\/scat.rb\/ruby\/ruby-talk\/93959\">this<\/a>.  This solution was a great starting point for where I ended up, but it was not general enough, it was hard coded, plus it was missing the getters and setters.  So it turns out that in ruby it wasn't too much trouble to convert a hash into a class object.  So let's get started:<br \/>\nI have implemented this for use in Rails, so let's start with the model that does all the magic:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt>11<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"r\">class<\/span> <span class=\"cl\">Hashit<\/span><tt>\n<\/tt>  <span class=\"r\">def<\/span> <span class=\"fu\">initialize<\/span>(hash)<tt>\n<\/tt>    hash.each <span class=\"r\">do<\/span> |k,v|<tt>\n<\/tt>      <span class=\"pc\">self<\/span>.instance_variable_set(<span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">@<\/span><span class=\"il\"><span class=\"dl\">#{<\/span>k<span class=\"dl\">}<\/span><\/span><span class=\"dl\">&quot;<\/span><\/span>, v)  <span class=\"c\">## create and initialize an instance variable for this key\/value pair<\/span><tt>\n<\/tt>      <span class=\"pc\">self<\/span>.class.send(<span class=\"sy\">:define_method<\/span>, k, proc{<span class=\"pc\">self<\/span>.instance_variable_get(<span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">@<\/span><span class=\"il\"><span class=\"dl\">#{<\/span>k<span class=\"dl\">}<\/span><\/span><span class=\"dl\">&quot;<\/span><\/span>)})  <span class=\"c\">## create the getter that returns the instance variable<\/span><tt>\n<\/tt>      <span class=\"pc\">self<\/span>.class.send(<span class=\"sy\">:define_method<\/span>, <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"il\"><span class=\"dl\">#{<\/span>k<span class=\"dl\">}<\/span><\/span><span class=\"k\">=<\/span><span class=\"dl\">&quot;<\/span><\/span>, proc{|v| <span class=\"pc\">self<\/span>.instance_variable_set(<span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">@<\/span><span class=\"il\"><span class=\"dl\">#{<\/span>k<span class=\"dl\">}<\/span><\/span><span class=\"dl\">&quot;<\/span><\/span>, v)})  <span class=\"c\">## create the setter that sets the instance variable<\/span><tt>\n<\/tt>    <span class=\"r\">end<\/span><tt>\n<\/tt>  <span class=\"r\">end<\/span><tt>\n<\/tt><span class=\"r\">end<\/span><tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>Notice the self.class.send(:define_method ...) rather than self.define_method, this is a hack to overcome the fact that define_method() is private. I had come across this when trying to figure out the post mentioned above.  Found the information to solve this <a href=\"http:\/\/www.ruby-doc.org\/core\/classes\/Module.html#M001677\">here<\/a>.<br \/>\nOk, so on to the Controller that creates the Hashit object:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"r\">class<\/span> <span class=\"cl\">TestItController<\/span> &lt; <span class=\"co\">ApplicationController<\/span><tt>\n<\/tt>  <span class=\"r\">def<\/span> <span class=\"fu\">index<\/span><tt>\n<\/tt>    hashit = {<span class=\"sy\">:support_email<\/span>  =&gt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">test@test.com<\/span><span class=\"dl\">&quot;<\/span><\/span>,<tt>\n<\/tt>              <span class=\"sy\">:allow_comments<\/span> =&gt; <span class=\"i\">0<\/span>}<tt>\n<\/tt>    <span class=\"iv\">@hashit<\/span>  = <span class=\"co\">Hashit<\/span>.new(hashit)<tt>\n<\/tt>  <span class=\"r\">end<\/span><tt>\n<\/tt><span class=\"r\">end<\/span><tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>Well that is easy, pass in a hash and get an object.  Here is what @hashit looks like at this point:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"c\">#&lt;Hashit:0xb6a65110 @allow_comments=0, @support_email=&quot;test@test.com&quot;&gt;<\/span><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>And of course, now the view, what we wanted to clean up and make more elegant. Here is what the user started with:<br \/>\nNote: In this example @hashit is an actual hash, not a class object.<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt>&lt;% form_tag <span class=\"sy\">:action<\/span> =&gt; <span class=\"s\"><span class=\"dl\">'<\/span><span class=\"k\">config<\/span><span class=\"dl\">'<\/span><\/span>, <span class=\"sy\">:method<\/span> =&gt; <span class=\"sy\">:post<\/span> <span class=\"r\">do<\/span> <span class=\"s\"><span class=\"dl\">%&gt;<\/span><span class=\"k\"><tt>\n<\/tt>  &lt;%= text_field 'settings',  'support_email', :size =<\/span><span class=\"dl\">&gt;<\/span><\/span> <span class=\"i\">20<\/span>, <span class=\"sy\">:value<\/span> =&gt; <span class=\"iv\">@hashit<\/span>[<span class=\"s\"><span class=\"dl\">'<\/span><span class=\"k\">support_email<\/span><span class=\"dl\">'<\/span><\/span>]%&gt;<tt>\n<\/tt>  ...<tt>\n<\/tt>&lt;% <span class=\"r\">end<\/span> <span class=\"s\"><span class=\"dl\">%&gt;<\/span><span class=\"k\"><tt>\n<\/tt><tt>\n<\/tt><\/span><\/span><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>And here is what our view code looks like now:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt>&lt;% form_for <span class=\"sy\">:hashit<\/span>, <span class=\"sy\">:url<\/span> =&gt; {<span class=\"sy\">:action<\/span> =&gt; <span class=\"s\"><span class=\"dl\">'<\/span><span class=\"k\">index<\/span><span class=\"dl\">'<\/span><\/span>} <span class=\"r\">do<\/span> |f| <span class=\"s\"><span class=\"dl\">%&gt;<\/span><span class=\"k\"><tt>\n<\/tt>  &lt;%= f.text_field :support_email %<\/span><span class=\"dl\">&gt;<\/span><\/span><tt>\n<\/tt>&lt;% <span class=\"r\">end<\/span> <span class=\"s\"><span class=\"dl\">%&gt;<\/span><span class=\"k\"><tt>\n<\/tt><tt>\n<\/tt><\/span><\/span><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>Much simpler, DRYer \ud83d\ude42<br \/>\nWell that is pretty much it, I suppose the next step would be to have a save method that updates the hash?  This way we can do @hashit.save() and it will return a new hash that you can use.  Well actually, that probably isn't too hard, lets see if I can do it real quick, class object back to hash ... <br \/>\nWell, I am back and I was able to figure it out, here is the new class:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt>11<tt>\n<\/tt>12<tt>\n<\/tt>13<tt>\n<\/tt>14<tt>\n<\/tt><strong>15<\/strong><tt>\n<\/tt>16<tt>\n<\/tt>17<tt>\n<\/tt>18<tt>\n<\/tt>19<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"r\">class<\/span> <span class=\"cl\">Hashit<\/span><tt>\n<\/tt>  <span class=\"r\">def<\/span> <span class=\"fu\">initialize<\/span>(hash)<tt>\n<\/tt>    hash.each <span class=\"r\">do<\/span> |k,v|<tt>\n<\/tt>      <span class=\"pc\">self<\/span>.instance_variable_set(<span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">@<\/span><span class=\"il\"><span class=\"dl\">#{<\/span>k<span class=\"dl\">}<\/span><\/span><span class=\"dl\">&quot;<\/span><\/span>, v)<tt>\n<\/tt>      <span class=\"pc\">self<\/span>.class.send(<span class=\"sy\">:define_method<\/span>, k, proc{<span class=\"pc\">self<\/span>.instance_variable_get(<span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">@<\/span><span class=\"il\"><span class=\"dl\">#{<\/span>k<span class=\"dl\">}<\/span><\/span><span class=\"dl\">&quot;<\/span><\/span>)})<tt>\n<\/tt>      <span class=\"pc\">self<\/span>.class.send(<span class=\"sy\">:define_method<\/span>, <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"il\"><span class=\"dl\">#{<\/span>k<span class=\"dl\">}<\/span><\/span><span class=\"k\">=<\/span><span class=\"dl\">&quot;<\/span><\/span>, proc{|v| <span class=\"pc\">self<\/span>.instance_variable_set(<span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">@<\/span><span class=\"il\"><span class=\"dl\">#{<\/span>k<span class=\"dl\">}<\/span><\/span><span class=\"dl\">&quot;<\/span><\/span>, v)})<tt>\n<\/tt>    <span class=\"r\">end<\/span><tt>\n<\/tt>  <span class=\"r\">end<\/span><tt>\n<\/tt><tt>\n<\/tt>  <span class=\"r\">def<\/span> <span class=\"fu\">save<\/span><tt>\n<\/tt>    hash_to_return = {}<tt>\n<\/tt>    <span class=\"pc\">self<\/span>.instance_variables.each <span class=\"r\">do<\/span> |var|<tt>\n<\/tt>      hash_to_return[var.gsub(<span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">@<\/span><span class=\"dl\">&quot;<\/span><\/span>,<span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"dl\">&quot;<\/span><\/span>)] = <span class=\"pc\">self<\/span>.instance_variable_get(var)<tt>\n<\/tt>    <span class=\"r\">end<\/span><tt>\n<\/tt>    <span class=\"r\">return<\/span> hash_to_return<tt>\n<\/tt>  <span class=\"r\">end<\/span><tt>\n<\/tt><span class=\"r\">end<\/span><tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>Just added the save() method, that takes all the instance variables and sets them as keys in our new hash. So here is the outcome of our save():<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt>{<span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">support_email<\/span><span class=\"dl\">&quot;<\/span><\/span>=&gt;<span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">new@some_email<\/span><span class=\"dl\">&quot;<\/span><\/span>, <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">allow_comments<\/span><span class=\"dl\">&quot;<\/span><\/span>=&gt;<span class=\"i\">0<\/span>}<tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n","protected":false},"excerpt":{"rendered":"<p>I first saw the need to convert a hash object to a class when answering this post. In the post, the user wanted to load a YAML object into his hash and then present the data from the hash in a form. Needless to say it was not very DRY the way it had to [&hellip;]<\/p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,3,5,9],"tags":[211],"_links":{"self":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/111"}],"collection":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/comments?post=111"}],"version-history":[{"count":1,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/111\/revisions"}],"predecessor-version":[{"id":57366,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/111\/revisions\/57366"}],"wp:attachment":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/media?parent=111"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/categories?post=111"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/tags?post=111"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}