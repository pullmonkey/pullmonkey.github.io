{"id":36184,"date":"2008-03-31T18:26:00","date_gmt":"2008-03-31T18:26:00","guid":{"rendered":"\/2008\/03\/31\/intersection-of-array-of-arrays-in-ruby"},"modified":"2009-08-30T04:45:40","modified_gmt":"2009-08-30T04:45:40","slug":"intersection-of-array-of-arrays-in-ruby","status":"publish","type":"post","link":"http:\/\/pullmonkey.com\/2008\/03\/31\/intersection-of-array-of-arrays-in-ruby\/","title":{"rendered":"Intersection of Array of Arrays &#8211; Ruby"},"content":{"rendered":"<p>Have you ever needed to retrieve the intersection of arrays in an array.  Well, I did.<br \/>\nLet's say that you have a has and belongs to many (habtm) association between articles and tags, (I.e., a tag habtm articles and an article habtm tags).  This means that tag.articles will return a list of articles that have that tag and article.tags will return the tags of the article.  So if a user wants to search your blog for all articles that have 'tag1' <b>and<\/b> 'tag2', you would return all <i>common<\/i> articles.<br \/>\nPicture a search page with a list of check boxes, one for each tag that you have.   The user can click as many tags as they want and then it is your job to find the common articles between them.  The search POST contains the ids of the selected tags, like params[:tag_ids] = [\"1\", \"3\", \"15\"] or something.  Let's go with this example.<br \/>\n1) The first step is to find those tags:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\">&gt;&gt; tags = <span class=\"co\">Tag<\/span>.find(params[<span class=\"sy\">:tag_ids<\/span>])<tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>2) Next, we want to get the articles associated with each tag, we will work with the ids:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\">&gt;&gt; tags.map(&amp;<span class=\"sy\">:article_ids<\/span>)<tt>\n<\/tt>=&gt; [[<span class=\"i\">1<\/span>,<span class=\"i\">2<\/span>,<span class=\"i\">3<\/span>],[<span class=\"i\">2<\/span>,<span class=\"i\">3<\/span>,<span class=\"i\">4<\/span>,<span class=\"i\">5<\/span>],[<span class=\"i\">2<\/span>,<span class=\"i\">3<\/span>,<span class=\"i\">6<\/span>]]<tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>So we have our array of arrays of article ids.  <br \/>\n3) Turn each sub array into a string like \"[1,2,3]\"<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\">&gt;&gt; tags.map(&amp;<span class=\"sy\">:article_ids<\/span>).map(&amp;<span class=\"sy\">:to_json<\/span>)<tt>\n<\/tt>=&gt; [<span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">[1, 2, 3]<\/span><span class=\"dl\">&quot;<\/span><\/span>, <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">[2, 3, 4, 5]<\/span><span class=\"dl\">&quot;<\/span><\/span>, <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">[2, 3, 6]<\/span><span class=\"dl\">&quot;<\/span><\/span>]<tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>4) Join by the intersection symbol (&) like this:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\">&gt;&gt; tags.map(&amp;<span class=\"sy\">:article_ids<\/span>).map(&amp;<span class=\"sy\">:to_json<\/span>).join(<span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">&amp;<\/span><span class=\"dl\">&quot;<\/span><\/span>)<tt>\n<\/tt>=&gt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">[1, 2, 3]&amp;[2, 3, 4, 5]&amp;[2, 3, 6]<\/span><span class=\"dl\">&quot;<\/span><\/span><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>5) Run eval() against this string:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\">&gt;&gt; eval(tags.map(&amp;<span class=\"sy\">:article_ids<\/span>).map(&amp;<span class=\"sy\">:to_json<\/span>).join(<span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">&amp;<\/span><span class=\"dl\">&quot;<\/span><\/span>))<tt>\n<\/tt>=&gt; [<span class=\"i\">2<\/span>,<span class=\"i\">3<\/span>]<tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>This means that the tags we selected have common articles with ids of 2 and 3.<br \/>\nSo a one-liner would be:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\">&gt;&gt; <span class=\"co\">Article<\/span>.find(eval(<span class=\"co\">Tag<\/span>.find(params[<span class=\"sy\">:tag_ids<\/span>]).map(&amp;<span class=\"sy\">:article_ids<\/span>).map(&amp;<span class=\"sy\">:to_json<\/span>).join(<span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">&amp;<\/span><span class=\"dl\">&quot;<\/span><\/span>)))<tt>\n<\/tt>=&gt; &lt;returns an array of article objects&gt;<tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n","protected":false},"excerpt":{"rendered":"<p>Have you ever needed to retrieve the intersection of arrays in an array. Well, I did. Let&#8217;s say that you have a has and belongs to many (habtm) association between articles and tags, (I.e., a tag habtm articles and an article habtm tags). This means that tag.articles will return a list of articles that have [&hellip;]<\/p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,3,9],"tags":[211],"_links":{"self":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/36184"}],"collection":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/comments?post=36184"}],"version-history":[{"count":1,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/36184\/revisions"}],"predecessor-version":[{"id":57363,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/36184\/revisions\/57363"}],"wp:attachment":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/media?parent=36184"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/categories?post=36184"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/tags?post=36184"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}