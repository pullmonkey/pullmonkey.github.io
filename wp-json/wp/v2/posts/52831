{"id":52831,"date":"2009-04-14T00:02:00","date_gmt":"2009-04-14T00:02:00","guid":{"rendered":"\/2009\/04\/14\/ece231-spring-2009-programming-assignment-4"},"modified":"2009-08-30T00:16:38","modified_gmt":"2009-08-30T00:16:38","slug":"ece231-spring-2009-programming-assignment-4","status":"publish","type":"post","link":"http:\/\/pullmonkey.com\/2009\/04\/14\/ece231-spring-2009-programming-assignment-4\/","title":{"rendered":"ECE231 &#8211; Spring 2009 &#8211; Programming Assignment 4"},"content":{"rendered":"<p>This is a step-by-step tutorial for this assignment and an explanation of the basics of how it works for those that are having a difficult time understanding or just are stuck somewhere. To <a href=\"http:\/\/www.unm.edu\/~speralta\/progs\/ece231assn4.htm\">view the assignment click here<\/a>.<\/p>\n<p>So for this assignment we are only going to be doing input and output. So the only header file we need is the <b>iostream<\/b> library.<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"pp\">#include<\/span> <span class=\"ic\">&lt;iostream&gt;<\/span><tt>\n<\/tt>using namespace std;<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<h2>Defining the Node Class<\/h2>\n<p>For the <b>node<\/b> class we need 5 private variables: <b><i>type<\/i><\/b>, <b><i>value<\/i><\/b>, <b><i>node1<\/i><\/b>, <b><i>node2<\/i><\/b>, <b><i>next<\/i><\/b>, a <b>constructor<\/b>, 5 <b>member functions<\/b>, and a <b>friend class<\/b>.<\/p>\n<p>Because most of the functions only return a single variable it would be a waste to have the functions outside the class so I put them all inside the class.<\/p>\n<p>So here is what your class should look like:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt>11<tt>\n<\/tt>12<tt>\n<\/tt>13<tt>\n<\/tt>14<tt>\n<\/tt><strong>15<\/strong><tt>\n<\/tt>16<tt>\n<\/tt>17<tt>\n<\/tt>18<tt>\n<\/tt>19<tt>\n<\/tt><strong>20<\/strong><tt>\n<\/tt>21<tt>\n<\/tt>22<tt>\n<\/tt>23<tt>\n<\/tt>24<tt>\n<\/tt><strong>25<\/strong><tt>\n<\/tt>26<tt>\n<\/tt>27<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt>class node<tt>\n<\/tt>{<tt>\n<\/tt>  <span class=\"la\">protected:<\/span><tt>\n<\/tt>    <span class=\"pt\">int<\/span> type;     <span class=\"c\">\/\/ type of component<\/span><tt>\n<\/tt>    <span class=\"pt\">double<\/span> value; <span class=\"c\">\/\/ value of the component<\/span><tt>\n<\/tt>    <span class=\"pt\">int<\/span> node1;    <span class=\"c\">\/\/ first node of the component<\/span><tt>\n<\/tt>    <span class=\"pt\">int<\/span> node2;    <span class=\"c\">\/\/ second node of the component<\/span><tt>\n<\/tt>    node *next;   <span class=\"c\">\/\/ pointer to the next node in list<\/span><tt>\n<\/tt>  <span class=\"la\">public:<\/span><tt>\n<\/tt>    node(<span class=\"pt\">int<\/span> a, <span class=\"pt\">double<\/span> b, <span class=\"pt\">int<\/span> c, <span class=\"pt\">int<\/span> d)<tt>\n<\/tt>    {<tt>\n<\/tt>      type  = a;<tt>\n<\/tt>      value = b;<tt>\n<\/tt>      node1 = c;<tt>\n<\/tt>      node2 = d;<tt>\n<\/tt>    }<tt>\n<\/tt><tt>\n<\/tt>    <span class=\"pt\">int<\/span> getType() { <span class=\"r\">return<\/span> type; }<tt>\n<\/tt>    <span class=\"pt\">double<\/span> getValue() { <span class=\"r\">return<\/span> value; }<tt>\n<\/tt>    <span class=\"pt\">int<\/span> getNode1() { <span class=\"r\">return<\/span> node1; }<tt>\n<\/tt>    <span class=\"pt\">int<\/span> getNode2() { <span class=\"r\">return<\/span> node2; }<tt>\n<\/tt>    node *getNext() { <span class=\"r\">return<\/span> next; }<tt>\n<\/tt><tt>\n<\/tt>    friend class circuit;<tt>\n<\/tt>};<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<h2>Defining the Circuit Class<\/h2>\n<p>For the <b>circuit<\/b> class we need 2 private variables: <b><i>first<\/i><\/b> and <b><i>last<\/i><\/b>, a <b>constructor<\/b>, a <b>copy constructor<\/b>, 6 <b>member functions<\/b>, and a <b>friend function<\/b>.<\/p>\n<p>For these I will put most of the functions on the outside of the class.<\/p>\n<p>So here is what your class should look like:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt>11<tt>\n<\/tt>12<tt>\n<\/tt>13<tt>\n<\/tt>14<tt>\n<\/tt><strong>15<\/strong><tt>\n<\/tt>16<tt>\n<\/tt>17<tt>\n<\/tt>18<tt>\n<\/tt>19<tt>\n<\/tt><strong>20<\/strong><tt>\n<\/tt>21<tt>\n<\/tt>22<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt>class circuit<tt>\n<\/tt>{<tt>\n<\/tt>  <span class=\"la\">protected:<\/span><tt>\n<\/tt>    node *first; <span class=\"c\">\/\/ pointer to first node in list<\/span><tt>\n<\/tt>    node *last;  <span class=\"c\">\/\/ pointer to last node in list<\/span><tt>\n<\/tt>    node *getNode(<span class=\"pt\">int<\/span> &amp; , <span class=\"pt\">double<\/span> &amp; , <span class=\"pt\">int<\/span> &amp; , <span class=\"pt\">int<\/span> &amp; );<tt>\n<\/tt>  <span class=\"la\">public:<\/span><tt>\n<\/tt>    circuit();<tt>\n<\/tt>    circuit(<span class=\"r\">const<\/span> circuit &amp; );<tt>\n<\/tt>    ~circuit();<tt>\n<\/tt><tt>\n<\/tt>    <span class=\"pt\">void<\/span> insert(<span class=\"pt\">int<\/span> , <span class=\"pt\">double<\/span> , <span class=\"pt\">int<\/span> , <span class=\"pt\">int<\/span> );<tt>\n<\/tt>    <span class=\"pt\">void<\/span> insertInFront(node * );<tt>\n<\/tt>    <span class=\"pt\">void<\/span> insertInBack(node * , node * );<tt>\n<\/tt>    <span class=\"pt\">void<\/span> insertInMiddle(node * , node * , node * );<tt>\n<\/tt>    <span class=\"pt\">bool<\/span> remove(<span class=\"pt\">int<\/span> , <span class=\"pt\">int<\/span> );<tt>\n<\/tt>    <span class=\"pt\">bool<\/span> isEmpty();<tt>\n<\/tt><tt>\n<\/tt>    friend ostream &amp; operator &lt;&lt; (ostream &amp; , circuit );<tt>\n<\/tt>};<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<h2>Writing the Actual Functions for the Circuit Class<\/h2>\n<p>First, we have the private function <b>getNode<\/b>. This function creates a new member of the <b>node<\/b> class and returns the address to it.<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt>node* circuit::getNode(<span class=\"pt\">int<\/span> &amp;t, <span class=\"pt\">double<\/span> &amp;v, <span class=\"pt\">int<\/span> &amp;n1, <span class=\"pt\">int<\/span> &amp;n2)<tt>\n<\/tt>{<tt>\n<\/tt>  node *temp = new node(t, v, n1, n2);<tt>\n<\/tt>  assert( temp != <span class=\"i\">0<\/span> );<tt>\n<\/tt>  <span class=\"r\">return<\/span> temp;<tt>\n<\/tt>}<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>Second, we have the a <b>constructor<\/b>, a <b>copy constructor<\/b>, and a <b>class destructor<\/b>:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt>11<tt>\n<\/tt>12<tt>\n<\/tt>13<tt>\n<\/tt>14<tt>\n<\/tt><strong>15<\/strong><tt>\n<\/tt>16<tt>\n<\/tt>17<tt>\n<\/tt>18<tt>\n<\/tt>19<tt>\n<\/tt><strong>20<\/strong><tt>\n<\/tt>21<tt>\n<\/tt>22<tt>\n<\/tt>23<tt>\n<\/tt>24<tt>\n<\/tt><strong>25<\/strong><tt>\n<\/tt>26<tt>\n<\/tt>27<tt>\n<\/tt>28<tt>\n<\/tt>29<tt>\n<\/tt><strong>30<\/strong><tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt>circuit::circuit()<tt>\n<\/tt>{<tt>\n<\/tt>  first = last = <span class=\"i\">0<\/span>;<tt>\n<\/tt>}<tt>\n<\/tt>circuit::circuit(<span class=\"r\">const<\/span> circuit &amp;c)<tt>\n<\/tt>{<tt>\n<\/tt>  first = last = <span class=\"i\">0<\/span>;<tt>\n<\/tt>  node *nc = c.first;<tt>\n<\/tt>  <span class=\"r\">while<\/span>(nc != <span class=\"i\">0<\/span>)<tt>\n<\/tt>  {<tt>\n<\/tt>    insert(nc-&gt;type, nc-&gt;value, nc-&gt;node1, nc-&gt;node2);<tt>\n<\/tt>    nc = nc-&gt;next;<tt>\n<\/tt>  }<tt>\n<\/tt>}<tt>\n<\/tt>circuit::~circuit()<tt>\n<\/tt>{<tt>\n<\/tt>  <span class=\"r\">if<\/span>( !isEmpty() )<tt>\n<\/tt>  {<tt>\n<\/tt>    node *nc = first;<tt>\n<\/tt>    node *temp;<tt>\n<\/tt>    <span class=\"r\">while<\/span>(nc != <span class=\"i\">0<\/span>)<tt>\n<\/tt>    {<tt>\n<\/tt>      temp = nc;<tt>\n<\/tt>      nc = nc-&gt;next;<tt>\n<\/tt>      delete temp;<tt>\n<\/tt>    }<tt>\n<\/tt>  }<tt>\n<\/tt>}<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>Next, we have the 6 <b>member functions<\/b>:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt>11<tt>\n<\/tt>12<tt>\n<\/tt>13<tt>\n<\/tt>14<tt>\n<\/tt><strong>15<\/strong><tt>\n<\/tt>16<tt>\n<\/tt>17<tt>\n<\/tt>18<tt>\n<\/tt>19<tt>\n<\/tt><strong>20<\/strong><tt>\n<\/tt>21<tt>\n<\/tt>22<tt>\n<\/tt>23<tt>\n<\/tt>24<tt>\n<\/tt><strong>25<\/strong><tt>\n<\/tt>26<tt>\n<\/tt>27<tt>\n<\/tt>28<tt>\n<\/tt>29<tt>\n<\/tt><strong>30<\/strong><tt>\n<\/tt>31<tt>\n<\/tt>32<tt>\n<\/tt>33<tt>\n<\/tt>34<tt>\n<\/tt><strong>35<\/strong><tt>\n<\/tt>36<tt>\n<\/tt>37<tt>\n<\/tt>38<tt>\n<\/tt>39<tt>\n<\/tt><strong>40<\/strong><tt>\n<\/tt>41<tt>\n<\/tt>42<tt>\n<\/tt>43<tt>\n<\/tt>44<tt>\n<\/tt><strong>45<\/strong><tt>\n<\/tt>46<tt>\n<\/tt>47<tt>\n<\/tt>48<tt>\n<\/tt>49<tt>\n<\/tt><strong>50<\/strong><tt>\n<\/tt>51<tt>\n<\/tt>52<tt>\n<\/tt>53<tt>\n<\/tt>54<tt>\n<\/tt><strong>55<\/strong><tt>\n<\/tt>56<tt>\n<\/tt>57<tt>\n<\/tt>58<tt>\n<\/tt>59<tt>\n<\/tt><strong>60<\/strong><tt>\n<\/tt>61<tt>\n<\/tt>62<tt>\n<\/tt>63<tt>\n<\/tt>64<tt>\n<\/tt><strong>65<\/strong><tt>\n<\/tt>66<tt>\n<\/tt>67<tt>\n<\/tt>68<tt>\n<\/tt>69<tt>\n<\/tt><strong>70<\/strong><tt>\n<\/tt>71<tt>\n<\/tt>72<tt>\n<\/tt>73<tt>\n<\/tt>74<tt>\n<\/tt><strong>75<\/strong><tt>\n<\/tt>76<tt>\n<\/tt>77<tt>\n<\/tt>78<tt>\n<\/tt>79<tt>\n<\/tt><strong>80<\/strong><tt>\n<\/tt>81<tt>\n<\/tt>82<tt>\n<\/tt>83<tt>\n<\/tt>84<tt>\n<\/tt><strong>85<\/strong><tt>\n<\/tt>86<tt>\n<\/tt>87<tt>\n<\/tt>88<tt>\n<\/tt>89<tt>\n<\/tt><strong>90<\/strong><tt>\n<\/tt>91<tt>\n<\/tt>92<tt>\n<\/tt>93<tt>\n<\/tt>94<tt>\n<\/tt><strong>95<\/strong><tt>\n<\/tt>96<tt>\n<\/tt>97<tt>\n<\/tt>98<tt>\n<\/tt>99<tt>\n<\/tt><strong>100<\/strong><tt>\n<\/tt>101<tt>\n<\/tt>102<tt>\n<\/tt>103<tt>\n<\/tt>104<tt>\n<\/tt><strong>105<\/strong><tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"pt\">void<\/span> circuit::insert(<span class=\"pt\">int<\/span> t, <span class=\"pt\">double<\/span> v, <span class=\"pt\">int<\/span> n1, <span class=\"pt\">int<\/span> n2)<tt>\n<\/tt>{<tt>\n<\/tt>  node *newNode = getNode(t, v, n1, n2);<tt>\n<\/tt>  node *nc = first;<tt>\n<\/tt>  node *nc_next = first;<tt>\n<\/tt>  <span class=\"r\">if<\/span>(isEmpty())<tt>\n<\/tt>  {<tt>\n<\/tt>    first = last = newNode;<tt>\n<\/tt>    newNode-&gt;next = <span class=\"i\">0<\/span>;<tt>\n<\/tt>  }<tt>\n<\/tt>  <span class=\"r\">else<\/span> <span class=\"r\">if<\/span>(first == last)<tt>\n<\/tt>  {<tt>\n<\/tt>    <span class=\"r\">if<\/span>(newNode-&gt;node1 &lt; first-&gt;node1)<tt>\n<\/tt>      insertInFront(newNode);<tt>\n<\/tt>    <span class=\"r\">else<\/span> <span class=\"r\">if<\/span>(newNode-&gt;node1 &gt; first-&gt;node1)<tt>\n<\/tt>      insertInBack(newNode, first);<tt>\n<\/tt>    <span class=\"r\">else<\/span> <span class=\"c\">\/\/ if newNode-&gt;node1 == first-&gt;node1<\/span><tt>\n<\/tt>    {<tt>\n<\/tt>      <span class=\"r\">if<\/span>(newNode-&gt;node2 &lt; first-&gt;node2)<tt>\n<\/tt>        insertInFront(newNode);<tt>\n<\/tt>      <span class=\"r\">else<\/span><tt>\n<\/tt>        insertInBack(newNode, first);<tt>\n<\/tt>    }<tt>\n<\/tt>  }<tt>\n<\/tt>  <span class=\"r\">else<\/span><tt>\n<\/tt>  {<tt>\n<\/tt>    <span class=\"r\">while<\/span>(nc-&gt;next != <span class=\"i\">0<\/span>)<tt>\n<\/tt>    {<tt>\n<\/tt>      <span class=\"r\">if<\/span>(newNode-&gt;node1 &lt; nc_next-&gt;node1)<tt>\n<\/tt>      {<tt>\n<\/tt>        <span class=\"r\">if<\/span>(nc_next == first)<tt>\n<\/tt>          insertInFront(newNode);<tt>\n<\/tt>        <span class=\"r\">else<\/span><tt>\n<\/tt>          insertInMiddle(newNode, nc, nc_next);<tt>\n<\/tt>        <span class=\"r\">break<\/span>;<tt>\n<\/tt>      }<tt>\n<\/tt>      <span class=\"r\">if<\/span>(newNode-&gt;node1 == nc_next-&gt;node1)<tt>\n<\/tt>      {<tt>\n<\/tt>        <span class=\"r\">if<\/span>(newNode-&gt;node2 &lt;= nc_next-&gt;node2)<tt>\n<\/tt>        {<tt>\n<\/tt>          <span class=\"r\">if<\/span>(nc_next == first)<tt>\n<\/tt>            insertInFront(newNode);<tt>\n<\/tt>          <span class=\"r\">else<\/span><tt>\n<\/tt>            insertInMiddle(newNode, nc, nc_next);<tt>\n<\/tt>          <span class=\"r\">break<\/span>;<tt>\n<\/tt>        }<tt>\n<\/tt>      }<tt>\n<\/tt>      <span class=\"r\">if<\/span>(newNode-&gt;node1 &gt;= nc_next-&gt;node1 and nc_next == last)<tt>\n<\/tt>      {<tt>\n<\/tt>        insertInBack(newNode, nc_next);<tt>\n<\/tt>        <span class=\"r\">break<\/span>;<tt>\n<\/tt>      }<tt>\n<\/tt>      nc = nc_next;<tt>\n<\/tt>      nc_next = nc-&gt;next;<tt>\n<\/tt>    }<tt>\n<\/tt>  }<tt>\n<\/tt>}<tt>\n<\/tt><span class=\"pt\">void<\/span> circuit::insertInFront(node *n)<tt>\n<\/tt>{<tt>\n<\/tt>  n-&gt;next = first;<tt>\n<\/tt>  first = n;<tt>\n<\/tt>}<tt>\n<\/tt><span class=\"pt\">void<\/span> circuit::insertInBack(node *n, node *p)<tt>\n<\/tt>{<tt>\n<\/tt>  p-&gt;next = last = n;<tt>\n<\/tt>  n-&gt;next = <span class=\"i\">0<\/span>;<tt>\n<\/tt>}<tt>\n<\/tt><span class=\"pt\">void<\/span> circuit::insertInMiddle(node *cn, node *p , node *n)<tt>\n<\/tt>{<tt>\n<\/tt>  p-&gt;next = cn;<tt>\n<\/tt>  cn-&gt;next = n;<tt>\n<\/tt>}<tt>\n<\/tt><span class=\"pt\">bool<\/span> circuit::remove(<span class=\"pt\">int<\/span> n1, <span class=\"pt\">int<\/span> n2)<tt>\n<\/tt>{<tt>\n<\/tt>  node *nc = first;<tt>\n<\/tt>  node *nc_next = first;<tt>\n<\/tt>  node *temp;<tt>\n<\/tt>  <span class=\"r\">if<\/span>( isEmpty() )<tt>\n<\/tt>    <span class=\"r\">return<\/span> <span class=\"pc\">false<\/span>;<tt>\n<\/tt>  <span class=\"r\">while<\/span> (nc_next != <span class=\"i\">0<\/span>)<tt>\n<\/tt>  {<tt>\n<\/tt>    <span class=\"r\">if<\/span>(nc_next != <span class=\"i\">0<\/span> and nc_next-&gt;node1 == n1 and nc_next-&gt;node2 == n2)<tt>\n<\/tt>    {<tt>\n<\/tt>      temp = nc_next;<tt>\n<\/tt>      nc-&gt;next = nc_next-&gt;next;<tt>\n<\/tt>      <span class=\"r\">if<\/span>(first == last)<tt>\n<\/tt>        first = last = <span class=\"i\">0<\/span>;<tt>\n<\/tt>      <span class=\"r\">if<\/span>(nc_next == first)<tt>\n<\/tt>        first = temp-&gt;next;<tt>\n<\/tt>      <span class=\"r\">if<\/span> (nc_next == last)<tt>\n<\/tt>        last = nc;<tt>\n<\/tt>      delete nc_next;<tt>\n<\/tt>      <span class=\"r\">return<\/span> <span class=\"pc\">true<\/span>;<tt>\n<\/tt>    }<tt>\n<\/tt>    nc = nc_next;<tt>\n<\/tt>    nc_next = nc-&gt;next;<tt>\n<\/tt>  }<tt>\n<\/tt>  <span class=\"r\">return<\/span> <span class=\"pc\">false<\/span>;<tt>\n<\/tt>}<tt>\n<\/tt><span class=\"pt\">bool<\/span> circuit::isEmpty()<tt>\n<\/tt>{<tt>\n<\/tt>  <span class=\"r\">return<\/span> ( first == <span class=\"i\">0<\/span> and last == <span class=\"i\">0<\/span> );<tt>\n<\/tt>}<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>Last, we have a <b>friend function<\/b>:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt>11<tt>\n<\/tt>12<tt>\n<\/tt>13<tt>\n<\/tt>14<tt>\n<\/tt><strong>15<\/strong><tt>\n<\/tt>16<tt>\n<\/tt>17<tt>\n<\/tt>18<tt>\n<\/tt>19<tt>\n<\/tt><strong>20<\/strong><tt>\n<\/tt>21<tt>\n<\/tt>22<tt>\n<\/tt>23<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt>ostream &amp; operator &lt;&lt; (ostream &amp;os, circuit c)<tt>\n<\/tt>{<tt>\n<\/tt>  node *nc = c.first; <span class=\"c\">\/\/ node count variable used for looping through list<\/span><tt>\n<\/tt>  <span class=\"pt\">int<\/span> lcv = <span class=\"i\">1<\/span>; <span class=\"c\">\/\/ loop control variable<\/span><tt>\n<\/tt>  cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">First: <\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; c.first &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">  Last: <\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; c.last &lt;&lt; endl;<tt>\n<\/tt>  <span class=\"r\">while<\/span> (nc != <span class=\"i\">0<\/span>)<tt>\n<\/tt>  {<tt>\n<\/tt>    os &lt;&lt; lcv &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">. <\/span><span class=\"dl\">&quot;<\/span><\/span><tt>\n<\/tt>       &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">node1: <\/span><span class=\"dl\">&quot;<\/span><\/span>   &lt;&lt; nc-&gt;getNode1() <tt>\n<\/tt>       &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">  node2: <\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; nc-&gt;getNode2()<tt>\n<\/tt>       &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">  type: <\/span><span class=\"dl\">&quot;<\/span><\/span>  &lt;&lt; nc-&gt;getType() <tt>\n<\/tt>       &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">  value: <\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; nc-&gt;getValue() <tt>\n<\/tt>       &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">  next: <\/span><span class=\"dl\">&quot;<\/span><\/span>  &lt;&lt; nc-&gt;getNext() <tt>\n<\/tt>       &lt;&lt; endl;<tt>\n<\/tt>    nc = nc-&gt;getNext();<tt>\n<\/tt>    lcv++;<tt>\n<\/tt>  }<tt>\n<\/tt>  <span class=\"r\">if<\/span>(c.first == <span class=\"i\">0<\/span>)<tt>\n<\/tt>    os &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">List is empty<\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; endl;<tt>\n<\/tt>  <span class=\"r\">return<\/span> os;<tt>\n<\/tt>}<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<h2>Testing your program<\/h2>\n<p>Our teacher gave us a test program, however I expanded it a little bit to test a bit more fully.<\/p>\n<p>So here is my test program:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt>11<tt>\n<\/tt>12<tt>\n<\/tt>13<tt>\n<\/tt>14<tt>\n<\/tt><strong>15<\/strong><tt>\n<\/tt>16<tt>\n<\/tt>17<tt>\n<\/tt>18<tt>\n<\/tt>19<tt>\n<\/tt><strong>20<\/strong><tt>\n<\/tt>21<tt>\n<\/tt>22<tt>\n<\/tt>23<tt>\n<\/tt>24<tt>\n<\/tt><strong>25<\/strong><tt>\n<\/tt>26<tt>\n<\/tt>27<tt>\n<\/tt>28<tt>\n<\/tt>29<tt>\n<\/tt><strong>30<\/strong><tt>\n<\/tt>31<tt>\n<\/tt>32<tt>\n<\/tt>33<tt>\n<\/tt>34<tt>\n<\/tt><strong>35<\/strong><tt>\n<\/tt>36<tt>\n<\/tt>37<tt>\n<\/tt>38<tt>\n<\/tt>39<tt>\n<\/tt><strong>40<\/strong><tt>\n<\/tt>41<tt>\n<\/tt>42<tt>\n<\/tt>43<tt>\n<\/tt>44<tt>\n<\/tt><strong>45<\/strong><tt>\n<\/tt>46<tt>\n<\/tt>47<tt>\n<\/tt>48<tt>\n<\/tt>49<tt>\n<\/tt><strong>50<\/strong><tt>\n<\/tt>51<tt>\n<\/tt>52<tt>\n<\/tt>53<tt>\n<\/tt>54<tt>\n<\/tt><strong>55<\/strong><tt>\n<\/tt>56<tt>\n<\/tt>57<tt>\n<\/tt>58<tt>\n<\/tt>59<tt>\n<\/tt><strong>60<\/strong><tt>\n<\/tt>61<tt>\n<\/tt>62<tt>\n<\/tt>63<tt>\n<\/tt>64<tt>\n<\/tt><strong>65<\/strong><tt>\n<\/tt>66<tt>\n<\/tt>67<tt>\n<\/tt>68<tt>\n<\/tt>69<tt>\n<\/tt><strong>70<\/strong><tt>\n<\/tt>71<tt>\n<\/tt>72<tt>\n<\/tt>73<tt>\n<\/tt>74<tt>\n<\/tt><strong>75<\/strong><tt>\n<\/tt>76<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"pp\">#include<\/span> <span class=\"ic\">&lt;iostream&gt;<\/span><tt>\n<\/tt><span class=\"pp\">#include<\/span> <span class=\"ic\">&quot;yourprogramname.h&quot;<\/span><tt>\n<\/tt>using namespace std;<tt>\n<\/tt><tt>\n<\/tt><span class=\"r\">const<\/span> <span class=\"pt\">int<\/span> M=<span class=\"i\">7<\/span>;<tt>\n<\/tt><span class=\"r\">const<\/span> <span class=\"pt\">int<\/span> R=<span class=\"i\">2<\/span>;<tt>\n<\/tt><tt>\n<\/tt><span class=\"pt\">int<\/span> main()<tt>\n<\/tt>{<tt>\n<\/tt>  circuit c, c2, c3;<tt>\n<\/tt>  <span class=\"pt\">int<\/span> d[M*<span class=\"i\">3<\/span>] = {<span class=\"i\">1<\/span>,<span class=\"i\">1<\/span>,<span class=\"i\">4<\/span>, <span class=\"i\">1<\/span>,<span class=\"i\">1<\/span>,<span class=\"i\">3<\/span>, <span class=\"i\">2<\/span>,<span class=\"i\">2<\/span>,<span class=\"i\">3<\/span>, <span class=\"i\">1<\/span>,<span class=\"i\">1<\/span>,<span class=\"i\">2<\/span>, <span class=\"i\">1<\/span>,<span class=\"i\">5<\/span>,<span class=\"i\">6<\/span>, <span class=\"i\">1<\/span>,<span class=\"i\">2<\/span>,<span class=\"i\">5<\/span>, <span class=\"i\">3<\/span>,<span class=\"i\">1<\/span>,<span class=\"i\">3<\/span>};<tt>\n<\/tt>  <span class=\"pt\">double<\/span> v[M] = {<span class=\"i\">1<\/span><span class=\"fl\">0<\/span><span class=\"fl\">.5<\/span>, <span class=\"i\">3<\/span><span class=\"fl\">0<\/span><span class=\"fl\">.7<\/span>, <span class=\"i\">10<\/span><span class=\"fl\">0<\/span><span class=\"fl\">.4<\/span>, <span class=\"i\">2<\/span><span class=\"fl\">0<\/span><span class=\"fl\">.6<\/span>, <span class=\"i\">3<\/span><span class=\"fl\">5<\/span><span class=\"fl\">.5<\/span>, <span class=\"i\">4<\/span><span class=\"fl\">5<\/span><span class=\"fl\">.9<\/span>, <span class=\"i\">6<\/span><span class=\"fl\">0<\/span><span class=\"fl\">.8<\/span>};<tt>\n<\/tt>  <span class=\"pt\">int<\/span> d1[R*<span class=\"i\">8<\/span>] = {<span class=\"i\">1<\/span>,<span class=\"i\">2<\/span>, <span class=\"i\">5<\/span>,<span class=\"i\">6<\/span>, <span class=\"i\">3<\/span>,<span class=\"i\">6<\/span>, <span class=\"i\">1<\/span>,<span class=\"i\">4<\/span>, <span class=\"i\">1<\/span>,<span class=\"i\">3<\/span>, <span class=\"i\">2<\/span>,<span class=\"i\">5<\/span>, <span class=\"i\">2<\/span>,<span class=\"i\">3<\/span>, <span class=\"i\">1<\/span>,<span class=\"i\">3<\/span>};<tt>\n<\/tt>  <span class=\"pt\">int<\/span> i, j;<tt>\n<\/tt><tt>\n<\/tt>  <span class=\"r\">for<\/span>( i=<span class=\"i\">0<\/span>,j=<span class=\"i\">0<\/span>; i&lt;M; i++,j=j+<span class=\"i\">3<\/span> )<tt>\n<\/tt>  {<tt>\n<\/tt>    cout &lt;&lt; i+<span class=\"i\">1<\/span> &lt;&lt; endl;<tt>\n<\/tt>    cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">Inserting new node into list with:<\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; endl;<tt>\n<\/tt>    cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">node1: <\/span><span class=\"dl\">&quot;<\/span><\/span>   &lt;&lt; d[j+<span class=\"i\">1<\/span>]<tt>\n<\/tt>         &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">  node2: <\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; d[j+<span class=\"i\">2<\/span>]<tt>\n<\/tt>         &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">  type: <\/span><span class=\"dl\">&quot;<\/span><\/span>  &lt;&lt; d[j]<tt>\n<\/tt>         &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">  value: <\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; v[i]<tt>\n<\/tt>         &lt;&lt; endl;<tt>\n<\/tt>    c.insert( d[j], v[i], d[j+<span class=\"i\">1<\/span>], d[j+<span class=\"i\">2<\/span>] );<tt>\n<\/tt>    cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">List: <\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; endl;<tt>\n<\/tt>    cout &lt;&lt; c &lt;&lt; endl &lt;&lt; endl;<tt>\n<\/tt>  }<tt>\n<\/tt>  <span class=\"r\">for<\/span>( i=<span class=\"i\">0<\/span>; i&lt;R*<span class=\"i\">8<\/span>; i=i+<span class=\"i\">2<\/span> )<tt>\n<\/tt>  {<tt>\n<\/tt>    cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">Removing node with:<\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; endl;<tt>\n<\/tt>    cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">node1: <\/span><span class=\"dl\">&quot;<\/span><\/span>   &lt;&lt; d1[i]<tt>\n<\/tt>         &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">  node2: <\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; d1[i+<span class=\"i\">1<\/span>]<tt>\n<\/tt>         &lt;&lt; endl;<tt>\n<\/tt>    <span class=\"r\">if<\/span>( c.remove( d1[i], d1[i+<span class=\"i\">1<\/span>] ) == <span class=\"pc\">false<\/span> )<tt>\n<\/tt>      cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">Node not found<\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; endl;<tt>\n<\/tt>    cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">List: <\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; endl;<tt>\n<\/tt>    cout &lt;&lt; c &lt;&lt; endl &lt;&lt; endl;<tt>\n<\/tt>  }<tt>\n<\/tt><tt>\n<\/tt>  cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"ch\">n<\/span><span class=\"ch\">n<\/span><span class=\"k\">Making List #2:<\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; endl;<tt>\n<\/tt>  <span class=\"pt\">int<\/span> d2[M*<span class=\"i\">3<\/span>] = {<span class=\"i\">2<\/span>,<span class=\"i\">2<\/span>,<span class=\"i\">4<\/span>, <span class=\"i\">1<\/span>,<span class=\"i\">1<\/span>,<span class=\"i\">3<\/span>, <span class=\"i\">2<\/span>,<span class=\"i\">2<\/span>,<span class=\"i\">3<\/span>, <span class=\"i\">1<\/span>,<span class=\"i\">1<\/span>,<span class=\"i\">2<\/span>, <span class=\"i\">1<\/span>,<span class=\"i\">5<\/span>,<span class=\"i\">6<\/span>, <span class=\"i\">1<\/span>,<span class=\"i\">2<\/span>,<span class=\"i\">5<\/span>, <span class=\"i\">3<\/span>,<span class=\"i\">1<\/span>,<span class=\"i\">3<\/span>};<tt>\n<\/tt>  <span class=\"r\">for<\/span>( i=<span class=\"i\">0<\/span>,j=<span class=\"i\">0<\/span>; i&lt;M; i++,j=j+<span class=\"i\">3<\/span> )<tt>\n<\/tt>  {<tt>\n<\/tt>    cout &lt;&lt; i+<span class=\"i\">1<\/span> &lt;&lt; endl;<tt>\n<\/tt>    cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">Inserting new node into list with:<\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; endl;<tt>\n<\/tt>    cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">node1: <\/span><span class=\"dl\">&quot;<\/span><\/span>   &lt;&lt; d2[j+<span class=\"i\">1<\/span>]<tt>\n<\/tt>         &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">  node2: <\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; d2[j+<span class=\"i\">2<\/span>]<tt>\n<\/tt>         &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">  type: <\/span><span class=\"dl\">&quot;<\/span><\/span>  &lt;&lt; d2[j]<tt>\n<\/tt>         &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">  value: <\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; v[i]<tt>\n<\/tt>         &lt;&lt; endl;<tt>\n<\/tt>    c2.insert( d2[j], v[i], d2[j+<span class=\"i\">1<\/span>], d2[j+<span class=\"i\">2<\/span>] );<tt>\n<\/tt>    cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">List: <\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; endl;<tt>\n<\/tt>    cout &lt;&lt; c2 &lt;&lt; endl &lt;&lt; endl;<tt>\n<\/tt>  }<tt>\n<\/tt><tt>\n<\/tt>  cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"ch\">n<\/span><span class=\"ch\">n<\/span><span class=\"k\">Making List #3:<\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; endl;<tt>\n<\/tt>  <span class=\"pt\">int<\/span> d3[M*<span class=\"i\">3<\/span>] = {<span class=\"i\">2<\/span>,<span class=\"i\">2<\/span>,<span class=\"i\">4<\/span>, <span class=\"i\">3<\/span>,<span class=\"i\">3<\/span>,<span class=\"i\">3<\/span>, <span class=\"i\">2<\/span>,<span class=\"i\">2<\/span>,<span class=\"i\">3<\/span>, <span class=\"i\">1<\/span>,<span class=\"i\">1<\/span>,<span class=\"i\">2<\/span>, <span class=\"i\">1<\/span>,<span class=\"i\">5<\/span>,<span class=\"i\">6<\/span>, <span class=\"i\">1<\/span>,<span class=\"i\">2<\/span>,<span class=\"i\">5<\/span>, <span class=\"i\">3<\/span>,<span class=\"i\">1<\/span>,<span class=\"i\">3<\/span>};<tt>\n<\/tt>  <span class=\"r\">for<\/span>( i=<span class=\"i\">0<\/span>,j=<span class=\"i\">0<\/span>; i&lt;M; i++,j=j+<span class=\"i\">3<\/span> )<tt>\n<\/tt>  {<tt>\n<\/tt>    cout &lt;&lt; i+<span class=\"i\">1<\/span> &lt;&lt; endl;<tt>\n<\/tt>    cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">Inserting new node into list with:<\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; endl;<tt>\n<\/tt>    cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">node1: <\/span><span class=\"dl\">&quot;<\/span><\/span>   &lt;&lt; d3[j+<span class=\"i\">1<\/span>]<tt>\n<\/tt>         &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">  node2: <\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; d3[j+<span class=\"i\">2<\/span>]<tt>\n<\/tt>         &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">  type: <\/span><span class=\"dl\">&quot;<\/span><\/span>  &lt;&lt; d3[j]<tt>\n<\/tt>         &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">  value: <\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; v[i]<tt>\n<\/tt>         &lt;&lt; endl;<tt>\n<\/tt>    c3.insert( d3[j], v[i], d3[j+<span class=\"i\">1<\/span>], d3[j+<span class=\"i\">2<\/span>] );<tt>\n<\/tt>    cout &lt;&lt; <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">List: <\/span><span class=\"dl\">&quot;<\/span><\/span> &lt;&lt; endl;<tt>\n<\/tt>    cout &lt;&lt; c3 &lt;&lt; endl &lt;&lt; endl;<tt>\n<\/tt>  }<tt>\n<\/tt><tt>\n<\/tt>  <span class=\"r\">return<\/span> <span class=\"i\">0<\/span>;<tt>\n<\/tt>}<tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n","protected":false},"excerpt":{"rendered":"<p>This is a step-by-step tutorial for this assignment and an explanation of the basics of how it works for those that are having a difficult time understanding or just are stuck somewhere. To view the assignment click here. So for this assignment we are only going to be doing input and output. So the only [&hellip;]<\/p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[32,6,3,14,30],"tags":[33,34,35],"_links":{"self":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/52831"}],"collection":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/users\/3"}],"replies":[{"embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/comments?post=52831"}],"version-history":[{"count":2,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/52831\/revisions"}],"predecessor-version":[{"id":57504,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/52831\/revisions\/57504"}],"wp:attachment":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/media?parent=52831"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/categories?post=52831"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/tags?post=52831"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}