{"id":3844,"date":"2008-02-19T15:52:00","date_gmt":"2008-02-19T15:52:00","guid":{"rendered":"\/2008\/02\/19\/errno-einval-invalid-argument"},"modified":"2009-08-30T04:45:44","modified_gmt":"2009-08-30T04:45:44","slug":"errno-einval-invalid-argument","status":"publish","type":"post","link":"http:\/\/pullmonkey.com\/2008\/02\/19\/errno-einval-invalid-argument\/","title":{"rendered":"Errno::EINVAL &#8211; Invalid argument"},"content":{"rendered":"<p>Windows' servers are pretty much an awful nightmare to get working.  A company that I am doing work for had the bright idea of hosting a fairly major web application on windows.  Not a good idea, not a good idea at all.  This has caused nothing but problems from ferret to having no way of stopping a service to this error  - Errno::EINVAL - Invalid argument.  <br \/>\nThe typical error you get looks something like this:<\/p>\n<h1>Errno::EINVAL in .....<\/h1>\n<p>Invalid argument<br \/>\n....<br \/>\n...\/lib\/active_record\/base.rb:1358:in `write'<br \/>\n...\/lib\/active_record\/base.rb:1358:in `compute_type'<br \/>\n....<\/p>\n<p>Ya, that is not something you want to get and have no idea what is going on, not to mention that it only happens every once in a while.  Especially, when you are already frustrated because nothing else seems to work perfectly.<\/p>\n<p>The error is caused when you are using a windows server and have decided that, as a good windows' administrator, you will create  a mongrel service for your application and set it to start automatically.  The service knows nothing about STDOUT, so anything written to STDOUT will produce the error above.  But, what still baffles me is the complete and utter randomness of the whole situation.  Why does it not happen all the time, why only every 6 to 10 times that I hit the same exact page? Well, I can't help you there, but let me know if you have figured it out.<\/p>\n<p>So, if you are lucky enough to get the same error above, then I have a solution for you, well actually a couple solutions.  First, if you have the choice, ditch windows, not worth it.  However, if you are like me and are forced to use windows for a project then your solution is a simple derivative of what you will find <a href=\"http:\/\/www.mail-archive.com\/mongrel-users@rubyforge.org\/msg03448.html\">here<\/a>.<br \/>\nNone of those solutions worked for me, or at least not to the point where I was satisfied.  They all got me very close, but without a way of still logging STDOUT.  The closest and, as the link above points out, the safest was to redirect STDOUT to a logfile:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"co\">STDOUT<\/span>.reopen(...)<tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>Well, that, unfortunately, did not work for me for some reason, probably some fault of windows, I am sure.  If you get it working, stick with that solution.  Otherwise, I went with the following:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt>11<tt>\n<\/tt>12<tt>\n<\/tt>13<tt>\n<\/tt>14<tt>\n<\/tt><strong>15<\/strong><tt>\n<\/tt>16<tt>\n<\/tt>17<tt>\n<\/tt>18<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"c\">###################################<\/span><tt>\n<\/tt><span class=\"c\"># RAILS_ROOT\/lib\/std_out_logger<\/span><tt>\n<\/tt><span class=\"c\">###################################<\/span><tt>\n<\/tt><span class=\"r\">class<\/span> <span class=\"cl\">StdOutLogger<\/span><tt>\n<\/tt>  <span class=\"r\">def<\/span> <span class=\"fu\">write<\/span>(s)<tt>\n<\/tt>    f = <span class=\"co\">File<\/span>.open(<span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">log\/stdout.log<\/span><span class=\"dl\">&quot;<\/span><\/span>, <span class=\"s\"><span class=\"dl\">&quot;<\/span><span class=\"k\">w+<\/span><span class=\"dl\">&quot;<\/span><\/span>)<tt>\n<\/tt>    f.puts s.inspect<tt>\n<\/tt>    f.close<tt>\n<\/tt>  <span class=\"r\">end<\/span><tt>\n<\/tt><span class=\"r\">end<\/span><tt>\n<\/tt><span class=\"c\">###################################<\/span><tt>\n<\/tt><span class=\"c\"># RAILS_ROOT\/app\/controllers\/application.rb<\/span><tt>\n<\/tt><span class=\"c\">###################################<\/span><tt>\n<\/tt><span class=\"c\"># redirect the output to a log file for when we run as a service<\/span><tt>\n<\/tt>before_filter {<tt>\n<\/tt>  <span class=\"gv\">$stdout<\/span> = <span class=\"gv\">$stderr<\/span> = <span class=\"co\">StdOutLogger<\/span>.new<tt>\n<\/tt>}<tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>\nI hope that helps you, it worked for me.  Good luck.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Windows&#8217; servers are pretty much an awful nightmare to get working. A company that I am doing work for had the bright idea of hosting a fairly major web application on windows. Not a good idea, not a good idea at all. This has caused nothing but problems from ferret to having no way of [&hellip;]<\/p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,3,5,9],"tags":[211],"_links":{"self":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/3844"}],"collection":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/comments?post=3844"}],"version-history":[{"count":1,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/3844\/revisions"}],"predecessor-version":[{"id":57364,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/3844\/revisions\/57364"}],"wp:attachment":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/media?parent=3844"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/categories?post=3844"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/tags?post=3844"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}