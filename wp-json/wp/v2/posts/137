{"id":137,"date":"2008-01-31T17:29:00","date_gmt":"2008-01-31T17:29:00","guid":{"rendered":"\/2008\/01\/31\/rounding-to-the-nearest-number-in-ruby"},"modified":"2009-08-30T04:45:48","modified_gmt":"2009-08-30T04:45:48","slug":"rounding-to-the-nearest-number-in-ruby","status":"publish","type":"post","link":"http:\/\/pullmonkey.com\/2008\/01\/31\/rounding-to-the-nearest-number-in-ruby\/","title":{"rendered":"Rounding to the nearest number in Ruby"},"content":{"rendered":"<p>A while ago, I was taking a look at a problem on the rails forum.  This <a href=\"\">post<\/a> was submitted to find the best solution to round any number to the nearest multiple of 10.  For example, this method would take the number 6 and return 10, or the number 29 and return 30.  So the first thing that popped into my mind was modulus.  We can use modulus to determine how far we are from the nearest multiple of 10.  Meaning that if we are given 19 and we want to know how close we are to the nearest 10, we can simple do 19 % 10, which will return 9, and 10 - 9 is 1, so we are 1 away from the nearest 10 spot.  Here is that method, assuming only Fixnum, so it is implemented as an extension of the Fixnum class:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"r\">class<\/span> <span class=\"cl\">Fixnum<\/span><tt>\n<\/tt>  <span class=\"r\">def<\/span> <span class=\"fu\">roundup<\/span><tt>\n<\/tt>    <span class=\"r\">return<\/span> <span class=\"pc\">self<\/span> <span class=\"r\">if<\/span> <span class=\"pc\">self<\/span> % <span class=\"i\">10<\/span> == <span class=\"i\">0<\/span>   <span class=\"c\"># already a factor of 10<\/span><tt>\n<\/tt>    <span class=\"r\">return<\/span> <span class=\"pc\">self<\/span> + <span class=\"i\">10<\/span> - (<span class=\"pc\">self<\/span> % <span class=\"i\">10<\/span>)  <span class=\"c\"># go to nearest factor 10<\/span><tt>\n<\/tt>  <span class=\"r\">end<\/span><tt>\n<\/tt><span class=\"r\">end<\/span> <tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>While this did the job, it was suggested that it would be better if  things happened. <\/p>\n<ol>\n<li>Use the Numeric class (this class encompasses Float, Fixnum and Integer)<\/li>\n<li>Don't limit the method to just the nearest 10, have it as a parameter<\/li>\n<li>And an added bonus - rounddown()<\/li>\n<\/ol>\n<p>\nHere is the resulting code (defaulting to 10):<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><strong>10<\/strong><tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt><span class=\"r\">class<\/span> <span class=\"cl\">Numeric<\/span><tt>\n<\/tt>  <span class=\"r\">def<\/span> <span class=\"fu\">roundup<\/span>(nearest=<span class=\"i\">10<\/span>)<tt>\n<\/tt>    <span class=\"pc\">self<\/span> % nearest == <span class=\"i\">0<\/span> ? <span class=\"pc\">self<\/span> : <span class=\"pc\">self<\/span> + nearest - (<span class=\"pc\">self<\/span> % nearest)<tt>\n<\/tt>  <span class=\"r\">end<\/span><tt>\n<\/tt>  <span class=\"r\">def<\/span> <span class=\"fu\">rounddown<\/span>(nearest=<span class=\"i\">10<\/span>)<tt>\n<\/tt>    <span class=\"pc\">self<\/span> % nearest == <span class=\"i\">0<\/span> ? <span class=\"pc\">self<\/span> : <span class=\"pc\">self<\/span> - (<span class=\"pc\">self<\/span> % nearest)<tt>\n<\/tt>  <span class=\"r\">end<\/span><tt>\n<\/tt><span class=\"r\">end<\/span> <tt>\n<\/tt><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n<p>Well that is pretty cool, here is some sample output from using this method:<\/p>\n<table class=\"CodeRay\">\n<tr>\n<td class=\"line_numbers\" title=\"click to toggle\" onclick=\"with (this.firstChild.style) { display = (display == '') ? 'none' : '' }\">\n<pre>1<tt>\n<\/tt>2<tt>\n<\/tt>3<tt>\n<\/tt>4<tt>\n<\/tt><strong>5<\/strong><tt>\n<\/tt>6<tt>\n<\/tt>7<tt>\n<\/tt>8<tt>\n<\/tt>9<tt>\n<\/tt><\/pre>\n<\/td>\n<td class=\"code\">\n<pre ondblclick=\"with (this.style) { overflow = (overflow == 'auto' || overflow == '') ? 'visible' : 'auto' }\"><tt>\n<\/tt>puts <span class=\"i\">2<\/span>.roundup    <span class=\"c\">#=&gt; 10<\/span><tt>\n<\/tt>puts <span class=\"i\">23<\/span>.roundup   <span class=\"c\">#=&gt; 30<\/span><tt>\n<\/tt>puts <span class=\"i\">20<\/span>.roundup   <span class=\"c\">#=&gt; 20<\/span><tt>\n<\/tt>puts <span class=\"i\">45<\/span>.roundup   <span class=\"c\">#=&gt; 50<\/span><tt>\n<\/tt>puts <span class=\"i\">156<\/span>.roundup  <span class=\"c\">#=&gt; 160 <\/span><tt>\n<\/tt>puts <span class=\"fl\">156.34<\/span>.roundup   <span class=\"c\">#=&gt; 160.0<\/span><tt>\n<\/tt>puts <span class=\"fl\">16.34<\/span>.roundup    <span class=\"c\">#=&gt; 20.0<\/span><tt>\n<\/tt>puts <span class=\"fl\">81.1234<\/span>.roundup  <span class=\"c\">#=&gt; 90.0 <\/span><tt>\n<\/tt><\/pre>\n<\/td>\n<\/tr>\n<\/table>\n","protected":false},"excerpt":{"rendered":"<p>A while ago, I was taking a look at a problem on the rails forum. This post was submitted to find the best solution to round any number to the nearest multiple of 10. For example, this method would take the number 6 and return 10, or the number 29 and return 30. So the [&hellip;]<\/p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,3,9],"tags":[211],"_links":{"self":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/137"}],"collection":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/comments?post=137"}],"version-history":[{"count":1,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/137\/revisions"}],"predecessor-version":[{"id":57365,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/posts\/137\/revisions\/57365"}],"wp:attachment":[{"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/media?parent=137"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/categories?post=137"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/pullmonkey.com\/wp-json\/wp\/v2\/tags?post=137"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}